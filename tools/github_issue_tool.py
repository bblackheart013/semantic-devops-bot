from typing import Dict, Optional
import os
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

def create_github_issue(issue_details: Dict, repo_owner: Optional[str] = None, 
                       repo_name: Optional[str] = None, github_token: Optional[str] = None) -> str:
    """
    Create a GitHub issue using analysis results.
    """
    # Improved debugging
    print(f"\n🔍 GitHub Issue Creation DEBUG:")
    print(f"  Repository: {repo_owner}/{repo_name}")
    print(f"  Token available: {'Yes' if github_token else 'No'}")
    
    # Fallback to environment variable if token not provided
    if github_token is None:
        github_token = os.getenv("GITHUB_TOKEN")
        print(f"  Using token from environment: {'Yes' if github_token else 'No'}")
    
    # Extracting issue information
    error_summary = issue_details.get('error_summary', 'Unknown error')
    root_cause = issue_details.get('root_cause', 'Unknown cause')
    severity = issue_details.get('severity', 'MEDIUM')
    solution = issue_details.get('recommended_solution', 'No solution provided')
    prevention = issue_details.get('prevention', 'No prevention steps provided')
    
    # Create issue title - keep it under 256 chars (GitHub limit)
    title = f"[{severity}] {error_summary[:200]}"
    
    # Create issue body
    body = f"""## Error Analysis

### Summary
{error_summary}

### Root Cause
{root_cause}

### Severity
{severity}

### Recommended Solution
{solution}

### Prevention
{prevention}

---
*This issue was automatically generated by the Semantic DevOps Bot*
"""

    # Attempt to create GitHub issue if we have all necessary information
    if github_token and repo_owner and repo_name:
        try:
            print(f"  Attempting to create issue in {repo_owner}/{repo_name}...")
            from github import Github
            # Handle token format - make sure it doesn't have any whitespace
            clean_token = github_token.strip()
            g = Github(clean_token)
            
            # Verify authentication before attempting to create issue
            try:
                # Test authentication
                user = g.get_user()
                print(f"  Authenticated as: {user.login}")
            except Exception as auth_error:
                print(f"  ❌ Authentication failed: {str(auth_error)}")
                return f"GitHub authentication failed: {str(auth_error)}"
                
            # Get the repository and create the issue    
            repo = g.get_repo(f"{repo_owner}/{repo_name}")
            issue = repo.create_issue(title=title, body=body)
            print(f"\n✅ GitHub Issue Created: {issue.html_url}")
            return f"GitHub issue created: {issue.html_url}"
        except ImportError as ie:
            print(f"\n❌ PyGithub not installed: {str(ie)}")
            return f"Failed to create GitHub issue: PyGithub not installed. Run 'pip install PyGithub'"
        except Exception as e:
            print(f"\n❌ Error creating GitHub issue: {str(e)}")
            # Fall back to simulation if API call fails
            print_simulated_issue(title, body, repo_owner, repo_name, error_summary, root_cause, severity, solution, prevention)
            return f"Failed to create GitHub issue: {str(e)}"
    else:
        missing = []
        if not github_token:
            missing.append("GitHub token")
        if not repo_owner:
            missing.append("Repository owner")
        if not repo_name:
            missing.append("Repository name")
            
        print(f"  ⚠️ Missing information: {', '.join(missing)}")
        # If we're missing information, just simulate the issue
        print_simulated_issue(title, body, repo_owner, repo_name, error_summary, root_cause, severity, solution, prevention)
        return f"GitHub issue creation failed - missing information: {', '.join(missing)}"


def print_simulated_issue(title, body, repo_owner, repo_name, error_summary, root_cause, severity, solution, prevention):
    """Print a simulated GitHub issue to the console."""
    print("\n=== Simulated GitHub Issue ===")
    print(f"📌 Title: {title}")
    if repo_owner and repo_name:
        print(f"📂 Repository: {repo_owner}/{repo_name}")
    print("🛠 Root Cause:", root_cause)
    print("✅ Solution:", solution)
    print("🔒 Prevention:", prevention)
    print("==============================\n")


class GitHubIssueTool:
    """A tool for creating GitHub issues from error analysis results."""
    
    def __init__(self, repo_owner: Optional[str] = None, 
                repo_name: Optional[str] = None, 
                github_token: Optional[str] = None):
        """
        Initialize the GitHub Issue Tool.
        
        Args:
            repo_owner (Optional[str]): GitHub repository owner
            repo_name (Optional[str]): GitHub repository name
            github_token (Optional[str]): GitHub API token for authentication
        """
        self.repo_owner = repo_owner
        self.repo_name = repo_name
        
        # Use provided token or fall back to environment variable
        self.github_token = github_token or os.getenv("GITHUB_TOKEN")
        
        self.configured = bool(self.repo_owner and self.repo_name)
    
    def create_issue(self, error_analysis: Dict) -> str:
        """
        Create a GitHub issue based on error analysis.
        
        Args:
            error_analysis (Dict): Analysis results with error details
            
        Returns:
            str: Confirmation message or issue URL
        """
        return create_github_issue(
            issue_details=error_analysis,
            repo_owner=self.repo_owner,
            repo_name=self.repo_name,
            github_token=self.github_token
        )
    
    def is_configured(self) -> bool:
        """Check if the tool is properly configured with repository information."""
        return self.configured


# Example usage
if __name__ == "__main__":
    # Sample error analysis
    sample_analysis = {
        "error_summary": "ModuleNotFoundError: No module named 'requests'",
        "root_cause": "The Python script is trying to import the 'requests' library, but it's not installed in the current environment",
        "severity": "MEDIUM",
        "recommended_solution": "Install the missing package using pip:\n\npip install requests",
        "prevention": "Use requirements.txt to document dependencies and virtual environments to isolate project dependencies"
    }
    
    # Using the tool class with environment variables
    tool = GitHubIssueTool(
        repo_owner=os.getenv("GITHUB_REPO_OWNER"),
        repo_name=os.getenv("GITHUB_REPO_NAME")
    )
    
    if tool.is_configured():
        print("Tool is configured with repository information.")
        result = tool.create_issue(sample_analysis)
        print(result)
    else:
        print("Tool is not fully configured. Set GITHUB_REPO_OWNER and GITHUB_REPO_NAME environment variables.")
        # Still create a simulated issue
        result = create_github_issue(sample_analysis)
        print(result)